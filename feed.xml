<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://grx78fl.github.io/</id><title>GRX's Blog</title><subtitle>Yet another InfoSec Blog.</subtitle> <updated>2023-02-20T00:57:02-05:00</updated> <author> <name>GRX78FL</name> <uri>https://grx78fl.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://grx78fl.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://grx78fl.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 GRX78FL </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>WinDbg Preview - a dirty fix for "Levels not implemented for this platform"</title><link href="https://grx78fl.github.io/posts/WinDbg-levels-not-implemented-for-this-platform/" rel="alternate" type="text/html" title="WinDbg Preview - a dirty fix for "Levels not implemented for this platform"" /><published>2023-02-19T00:00:00-05:00</published> <updated>2023-02-20T00:56:37-05:00</updated> <id>https://grx78fl.github.io/posts/WinDbg-levels-not-implemented-for-this-platform/</id> <content src="https://grx78fl.github.io/posts/WinDbg-levels-not-implemented-for-this-platform/" /> <author> <name>GRX78FL</name> </author> <category term="WINDBG" /> <category term="ASSEMBLY" /> <summary> The issue Imagine being deep into a kernel debugging session and suddenly your debugger stops working as expected. (This has been going on for years at this point and it doesn’t look like there’s active interest in fixing or investigating the bug, yet.) Still, it continues to be a crippling bug that affects us at the worst possible times. Rebooting to roll the dice in hopes this will temp... </summary> </entry> <entry><title>Writing A (covert) Dynamic Loader in x86-64 MASM [0x02]</title><link href="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x02/" rel="alternate" type="text/html" title="Writing A (covert) Dynamic Loader in x86-64 MASM [0x02]" /><published>2022-07-01T00:00:00-04:00</published> <updated>2022-07-01T00:00:00-04:00</updated> <id>https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x02/</id> <content src="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x02/" /> <author> <name>GRX78FL</name> </author> <category term="PROGRAMMING" /> <category term="ASSEMBLY" /> <summary> [0x02] - The Problem Imports: As the analysts we’d like to quickly get an idea of what this binary is doing statically. So we sit down, open our favorite tool and check what kind of file it is, what libraries it depends on and what functions it calls: Imports tab in IDA Looks like this executable will perform dynamic linking at runtime, which is generally a red flag when dealing w... </summary> </entry> <entry><title>Writing A (covert) Dynamic Loader in x86-64 MASM [0x01]</title><link href="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x01/" rel="alternate" type="text/html" title="Writing A (covert) Dynamic Loader in x86-64 MASM [0x01]" /><published>2022-06-28T00:00:00-04:00</published> <updated>2023-02-19T20:07:25-05:00</updated> <id>https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x01/</id> <content src="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x01/" /> <author> <name>GRX78FL</name> </author> <category term="PROGRAMMING" /> <category term="ASSEMBLY" /> <summary> [0x01] - General Code Structure What we’re doing: How we’re doing it: We’ll start by declaring the only two imports we require to bootstrap our loader. ; HMODULE GetModuleHandleA(LPCSTR modulename) EXTRN __imp_GetModuleHandleA:PROC ; FARPROC GetProcAddress (HMODULE modulehandle, LPCSTR procname) EXTRN __imp_GetProcAddress:PROC The next step is to prepare some stati... </summary> </entry> <entry><title>Writing A (covert) Dynamic Loader in x86-64 MASM [0x00]</title><link href="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x00/" rel="alternate" type="text/html" title="Writing A (covert) Dynamic Loader in x86-64 MASM [0x00]" /><published>2022-06-28T00:00:00-04:00</published> <updated>2022-07-01T03:58:13-04:00</updated> <id>https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x00/</id> <content src="https://grx78fl.github.io/posts/Dynamic-Loader-x86-64-MASM-0x00/" /> <author> <name>GRX78FL</name> </author> <category term="PROGRAMMING" /> <category term="ASSEMBLY" /> <summary> [0x00] - Introduction Assumptions about the reader’s knowledge: Understanding of C code (pointers, structs, control flow …); Some Python3 experience (basic operations); Some Assembly experience (g.p. registers, stack layout, control flow …); Basic computer usage knowledge. Goals of this series: Get a working POC that when inspected statically gives nothing away; Avoi... </summary> </entry> </feed>
